import openai
import os

def load_file_content(filepath):
    """Load and return the content of a file."""
    with open(filepath, 'r', encoding='utf-8') as file:
        return file.read()

def generate_llm_prompt(readme_content, code_analysis_summary):
    """Generate a prompt for the LLM using the README and code analysis summary."""
    prompt = f"Current README:\n{readme_content}\n\nCode Changes Summary:\n{code_analysis_summary}\n\nUpdated README:"
    return prompt

def get_updated_readme(prompt):
    """Use the OpenAI API to generate an updated README based on the prompt."""
    openai.api_key = os.getenv('OPENAI_API_KEY')  # Ensure this environment variable is set in your GitHub Actions workflow
    response = openai.Completion.create(
        engine="text-davinci-003",  # Update the engine name based on OpenAI's current offerings
        prompt=prompt,
        max_tokens=1024  # Adjust based on your needs
    )
    return response.choices[0].text.strip()

def main():
    readme_content = load_file_content('README.md')  # Adjust the path if necessary
    code_analysis_summary = load_file_content('code_change_summary.txt')  # This file should be generated by the analyze_code.py script

    prompt = generate_llm_prompt(readme_content, code_analysis_summary)
    updated_readme_content = get_updated_readme(prompt)

    print(updated_readme_content)
    # Optionally, write the updated README to a file. You might want to review this before making it the official README
    # with open('UPDATED_README.md', 'w', encoding='utf-8') as file:
    #     file.write(updated_readme_content)

if __name__ == "__main__":
    main()
